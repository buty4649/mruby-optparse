--- cruby/optparse.rb	2025-04-28 00:34:38.659343000 +0900
+++ mruby/optparse.rb	2025-04-28 00:33:37.742259852 +0900
@@ -142,7 +142,7 @@
 # Used:
 #
 #   $ ruby optparse-test.rb -r
-#   optparse-test.rb:9:in `<main>': missing argument: -r (OptionParser::MissingArgument)
+#   optparse-test.rb:9:in '<main>': missing argument: -r (OptionParser::MissingArgument)
 #   $ ruby optparse-test.rb -r my-library
 #   You required my-library!
 #
@@ -235,7 +235,7 @@
 #   $ ruby optparse-test.rb --user 2
 #   #<struct User id=2, name="Gandalf">
 #   $ ruby optparse-test.rb --user 3
-#   optparse-test.rb:15:in `block in find_user': No User Found for id 3 (RuntimeError)
+#   optparse-test.rb:15:in 'block in find_user': No User Found for id 3 (RuntimeError)
 #
 # === Store options to a Hash
 #
@@ -425,7 +425,7 @@
 #
 class OptionParser
   # The version string
-  OptionParser::Version = "0.6.0"
+  OptionParser::Version = "0.7.0.dev.2"
 
   # :stopdoc:
   NoArgument = [NO_ARGUMENT = :NONE, nil].freeze
@@ -441,6 +441,7 @@
     # :nodoc:
 
     def self.regexp(key, icase)
+      icase = nil if icase == false
       Regexp.new('\A' + Regexp.quote(key).gsub(/\w+\b/, '\&\w*'), icase)
     end
 
@@ -452,7 +453,7 @@
            kn = ""
            k === key
          else
-           kn = defined?(k.id2name) ? k.id2name : k
+           kn = k.respond_to?(:to_s) ? k.to_s : k
            pat === kn
          end) or next
         v << k if v.empty?
@@ -461,6 +462,10 @@
       candidates
     end
 
+    def self.completable?(key)
+      key.respond_to?(:to_s)
+    end
+
     def candidate(key, icase = false, pat = nil, &_)
       Completion.candidate(key, icase, pat, &method(:each))
     end
@@ -496,7 +501,6 @@
     end
   end
 
-
   #
   # Map from option/keyword string to object with completion.
   #
@@ -504,7 +508,6 @@
     include Completion
   end
 
-
   #
   # Individual switch class.  Not important to the user.
   #
@@ -536,8 +539,7 @@
     end
 
     def self.incompatible_argument_styles(arg, t)
-      raise(ArgumentError, "#{arg}: incompatible argument styles\n  #{self}, #{t}",
-            ParseError.filter_backtrace(caller(2)))
+      raise(ArgumentError, "#{arg}: incompatible argument styles\n  #{self}, #{t}")
     end
 
     def self.pattern
@@ -546,11 +548,11 @@
 
     def initialize(pattern = nil, conv = nil,
                    short = nil, long = nil, arg = nil,
-                   desc = ([] if short or long), block = nil, &_block)
+                   desc = ([] if short or long), block = nil, values = nil, &_block)
       raise if Array === pattern
       block ||= _block
-      @pattern, @conv, @short, @long, @arg, @desc, @block =
-        pattern, conv, short, long, arg, desc, block
+      @pattern, @conv, @short, @long, @arg, @desc, @block, @values =
+        pattern, conv, short, long, arg, desc, block, values
     end
 
     #
@@ -583,11 +585,15 @@
     # exception.
     #
     def conv_arg(arg, val = []) # :nodoc:
+      v, = *val
       if conv
         val = conv.call(*val)
       else
         val = proc {|v| v}.call(*val)
       end
+      if @values
+        @values.include?(val) or raise InvalidArgument, v
+      end
       return arg, block, val
     end
     private :conv_arg
@@ -668,7 +674,7 @@
 
       (sopts+lopts).each do |opt|
         # "(-x -c -r)-l[left justify]"
-        if /^--\[no-\](.+)$/ =~ opt
+        if /\A--\[no-\](.+)$/ =~ opt
           o = $1
           yield("--#{o}", desc.join(""))
           yield("--no-#{o}", desc.join(""))
@@ -1032,14 +1038,13 @@
   DefaultList.short['-'] = Switch::NoArgument.new {}
   DefaultList.long[''] = Switch::NoArgument.new {throw :terminate}
 
-
-  COMPSYS_HEADER = <<'XXX'      # :nodoc:
+  COMPSYS_HEADER = "
 
 typeset -A opt_args
 local context state line
 
 _arguments -s -S \
-XXX
+"
 
   def compsys(to, name = File.basename($0)) # :nodoc:
     to << "#compdef #{name}\n"
@@ -1051,16 +1056,16 @@
   end
 
   def help_exit
-    if STDOUT.tty? && (pager = ENV.values_at(*%w[RUBY_PAGER PAGER]).find {|e| e && !e.empty?})
+    if $stdout.tty? && (pager = %w[RUBY_PAGER PAGER].map {|e| ENV[e]}.find {|e| e && !e.empty?})
       less = ENV["LESS"]
-      args = [{"LESS" => "#{!less || less.empty? ? '-' : less}Fe"}, pager, "w"]
+      args = [{"LESS" => "#{less} -Fe"}, pager, "w"]
       print = proc do |f|
         f.puts help
       rescue Errno::EPIPE
         # pager terminated
       end
       if Process.respond_to?(:fork) and false
-        IO.popen("-") {|f| f ? Process.exec(*args, in: f) : print.call(STDOUT)}
+        IO.popen("-") {|f| f ? Process.exec(*args, in: f) : print.call($stdout)}
         # unreachable
       end
       IO.popen(*args, &print)
@@ -1102,7 +1107,7 @@
   #
   Officious['*-completion-zsh'] = proc do |parser|
     Switch::OptionalArgument.new do |arg|
-      parser.compsys(STDOUT, arg)
+      parser.compsys($stdout, arg)
       exit
     end
   end
@@ -1114,14 +1119,9 @@
   Officious['version'] = proc do |parser|
     Switch::OptionalArgument.new do |pkg|
       if pkg
-        begin
-          require_relative 'optparse/version'
-        rescue LoadError
-        else
-          show_version(*pkg.split(/,/)) or
-            abort("#{parser.program_name}: no version found in package #{pkg}")
-          exit
-        end
+        show_version(*pkg.split(/,/)) or
+          abort("#{parser.program_name}: no version found in package #{pkg}")
+        exit
       end
       v = parser.ver or abort("#{parser.program_name}: version unknown")
       puts v
@@ -1288,7 +1288,7 @@
   # to $0.
   #
   def program_name
-    @program_name || File.basename($0, '.*')
+    @program_name || File.basename($0).sub(/\..+?$/, "")
   end
 
   # for experimental cascading :-)
@@ -1334,7 +1334,7 @@
   #
   # See Kernel#warn.
   #
-  def warn(mesg = $!)
+  def warn(mesg)
     super("#{program_name}: #{mesg}")
   end
 
@@ -1345,7 +1345,7 @@
   #
   # See Kernel#abort.
   #
-  def abort(mesg = $!)
+  def abort(mesg)
     super("#{program_name}: #{mesg}")
   end
 
@@ -1425,11 +1425,6 @@
     end
   end
 
-  def inspect                   # :nodoc:
-    require 'pp'
-    pretty_print_inspect
-  end
-
   #
   # Returns option summary list.
   #
@@ -1467,6 +1462,7 @@
     klass = nil
     q, a = nil
     has_arg = false
+    values = nil
 
     opts.each do |o|
       # argument class
@@ -1480,7 +1476,7 @@
       end
 
       # directly specified pattern(any object possible to match)
-      if (!(String === o || Symbol === o)) and o.respond_to?(:match)
+      if !Completion.completable?(o) and o.respond_to?(:match)
         pattern = notwice(o, pattern, 'pattern')
         if pattern.respond_to?(:convert)
           conv = pattern.method(:convert).to_proc
@@ -1495,6 +1491,11 @@
       when Proc, Method
         block = notwice(o, block, 'block')
       when Array, Hash
+        if Array === o
+          o, v = o.partition {|v,| Completion.completable?(v)}
+          values = notwice(v, values, 'values') unless v.empty?
+          next if o.empty?
+        end
         case pattern
         when CompletingHash
         when nil
@@ -1504,11 +1505,13 @@
           raise ArgumentError, "argument pattern given twice"
         end
         o.each {|pat, *v| pattern[pat] = v.fetch(0) {pat}}
+      when Range
+        values = notwice(o, values, 'values')
       when Module
         raise ArgumentError, "unsupported argument type: #{o}", ParseError.filter_backtrace(caller(4))
       when *ArgumentStyle.keys
         style = notwice(ArgumentStyle[o], style, 'style')
-      when /^--no-([^\[\]=\s]*)(.+)?/
+      when /\A--no-([^\[\]=\s]*)(.+)?/
         q, a = $1, $2
         o = notwice(a ? Object : TrueClass, klass, 'type')
         not_pattern, not_conv = search(:atype, o) unless not_style
@@ -1519,7 +1522,7 @@
         (q = q.downcase).tr!('_', '-')
         long << "no-#{q}"
         nolong << q
-      when /^--\[no-\]([^\[\]=\s]*)(.+)?/
+      when /\A--\[no-\]([^\[\]=\s]*)(.+)?/
         q, a = $1, $2
         o = notwice(a ? Object : TrueClass, klass, 'type')
         if a
@@ -1532,7 +1535,7 @@
         not_pattern, not_conv = search(:atype, FalseClass) unless not_style
         not_style = Switch::NoArgument
         nolong << "no-#{o}"
-      when /^--([^\[\]=\s]*)(.+)?/
+      when /\A--([^\[\]=\s]*)(.+)?/
         q, a = $1, $2
         if a
           o = notwice(NilClass, klass, 'type')
@@ -1542,7 +1545,7 @@
         ldesc << "--#{q}"
         (o = q.downcase).tr!('_', '-')
         long << o
-      when /^-(\[\^?\]?(?:[^\\\]]|\\.)*\])(.+)?/
+      when /\A-(\[\^?\]?(?:[^\\\]]|\\.)*\])(.+)?/
         q, a = $1, $2
         o = notwice(Object, klass, 'type')
         if a
@@ -1553,7 +1556,7 @@
         end
         sdesc << "-#{q}"
         short << Regexp.new(q)
-      when /^-(.)(.+)?/
+      when /\A-(.)(.+)?/
         q, a = $1, $2
         if a
           o = notwice(NilClass, klass, 'type')
@@ -1562,7 +1565,7 @@
         end
         sdesc << "-#{q}"
         short << q
-      when /^=/
+      when /\A=/
         style = notwice(default_style.guess(arg = o), style, 'style')
         default_pattern, conv = search(:atype, Object) unless default_pattern
       else
@@ -1571,12 +1574,18 @@
     end
 
     default_pattern, conv = search(:atype, default_style.pattern) unless default_pattern
+    if Range === values and klass
+      unless (!values.begin or klass === values.begin) and
+            (!values.end or klass === values.end)
+        raise ArgumentError, "range does not match class"
+      end
+    end
     if !(short.empty? and long.empty?)
       if has_arg and default_style == Switch::NoArgument
         default_style = Switch::RequiredArgument
       end
       s = (style || default_style).new(pattern || default_pattern,
-                                       conv, sdesc, ldesc, arg, desc, block)
+                                       conv, sdesc, ldesc, arg, desc, block, values)
     elsif !block
       if style or pattern
         raise ArgumentError, "no switch given", ParseError.filter_backtrace(caller)
@@ -1585,7 +1594,7 @@
     else
       short << pattern
       s = (style || default_style).new(pattern,
-                                       conv, nil, nil, arg, desc, block)
+                                       conv, nil, nil, arg, desc, block, values)
     end
     return s, short, long,
       (not_style.new(not_pattern, not_conv, sdesc, ldesc, nil, desc, block) if not_style),
@@ -1756,14 +1765,14 @@
                 eq ||= !rest
               end
             end
-          rescue ParseError
+          rescue ParseError => e
             throw :terminate, arg unless raise_unknown
-            raise $!.set_option(arg, true)
+            raise e.set_option(arg, true)
           end
           begin
             opt, cb, val = sw.parse(val, argv) {|*exc| raise(*exc) if eq}
-          rescue ParseError
-            raise $!.set_option(arg, arg.length > 2)
+          rescue ParseError => e
+            raise e.set_option(arg, arg.length > 2)
           else
             raise InvalidOption, arg if has_arg and !eq and arg == "-#{opt}"
           end
@@ -1771,8 +1780,8 @@
             argv.unshift(opt) if opt and (!rest or (opt = opt.sub(/\A-*/, '-')) != '-')
             val = callback!(cb, 1, val) if cb
             callback!(setter, 2, sw.switch_name, val) if setter
-          rescue ParseError
-            raise $!.set_option(arg, arg.length > 2)
+          rescue ParseError => e
+            raise e.set_option(arg, arg.length > 2)
           end
 
         # non-option argument
@@ -1954,7 +1963,7 @@
       visit(:complete, typ, opt, icase, *pat) {|o, *sw| return sw}
     }
     exc = ambiguous ? AmbiguousOption : InvalidOption
-    raise exc.new(opt, additional: self.method(:additional_message).curry[typ])
+    raise exc.new(opt, additional: proc { |typ, opt| additional_message(typ, opt) }.call(typ))
   end
   private :complete
 
@@ -2018,7 +2027,7 @@
   #
   def load(filename = nil, **keywords)
     unless filename
-      basename = File.basename($0, '.*')
+      basename = File.basename($0).sub(/\..+?$/, "")
       return true if load(File.expand_path(basename, '~/.options'), **keywords) rescue nil
       basename << ".options"
       return [
@@ -2048,9 +2057,8 @@
   #
   # +env+ defaults to the basename of the program.
   #
-  def environment(env = File.basename($0, '.*'), **keywords)
+  def environment(env, **keywords)
     env = ENV[env] || ENV[env.upcase] or return
-    require 'shellwords'
     parse(*Shellwords.shellwords(env), **keywords)
   end
 
@@ -2358,8 +2366,8 @@
       block_given? or return @optparse
       begin
         yield @optparse
-      rescue ParseError
-        @optparse.warn $!
+      rescue ParseError => e
+        @optparse.warn e
         nil
       end
     end
@@ -2423,7 +2431,7 @@
 end
 
 # ARGV is arguable by OptionParser
-ARGV.extend(OptionParser::Arguable)
+#ARGV.extend(OptionParser::Arguable)
 
 # An alias for OptionParser.
 OptParse = OptionParser  # :nodoc:
